#!/bin/bash
CURRENT_DIR_PATH=$(pwd)
SERVICE="federated-network-service"
CONF_FILES_DIR_PATH=$CURRENT_DIR_PATH/"conf-files"
SERVICES_CONF_FILE_NAME=services.conf
FNS_CONF_FILE_NAME="fns.conf"
LOG4F_FILE_NAME="log4j.properties"
APPLICATION_CONF_FILE_NAME="application.properties"
SHARED_INFO_FILE_PATH=$CONF_FILES_DIR_PATH/"shared.info"
CONTAINER_BASE_PATH="/root"/$SERVICE
CONTAINER_RESOURCES_PATH=$CONTAINER_BASE_PATH/src/main/resources
CONTAINER_CONF_FILES_DIR_PATH=$CONTAINER_RESOURCES_PATH/"private"
FNS_TIMESTAMP_DB_FILE_NAME="fns.db"
PARENT_DIR_PATH=$(dirname $CURRENT_DIR_PATH)
TIMESTAMP_DB_DIR_NAME="timestamp-storage"
IMAGE_NAME="fogbow"/$SERVICE
CONTAINER_NAME=$SERVICE

# Edit configurations from RAS service

## Copy application.properties from RAS and edit

RAS_BASE_DIR_PATH="../resource-allocation-service"
RAS_CONF_FILE_DIR_PATH=$RAS_BASE_DIR_PATH/"conf-files"
APP_PROPERTIES_FILE_NAME="application.properties"
cp $RAS_BASE_DIR_PATH/$APP_PROPERTIES_FILE_NAME $APP_PROPERTIES_FILE_NAME

RAS_BD_PATTERN="ras"
FNS_BD_NAME="fns"
sed -i "s|$RAS_BD_PATTERN|$FNS_BD_NAME|g" $APP_PROPERTIES_FILE_NAME

## Complete fns.conf configuration using ras.conf info

RAS_CONF_FILE_PATH=$RAS_CONF_FILE_DIR_PATH/"ras.conf"
FNS_CONF_FILE_PATH=$CONF_FILES_DIR_PATH/$FNS_CONF_FILE_NAME

PROVIDER_ID_PATTERN="provider_id"
XMPP_JID_PATTERN="xmpp_jid"
XMPP_PASSWORD_PATTERN="xmpp_password"
XMPP_SERVER_IP_PATTERN="xmpp_server_ip"
AS_URL_PATTERN="as_url"
AS_PORT_PATTERN="as_port"
RAS_URL_PATTERN="ras_url"
RAS_PORT_PATTERN="ras_port"

PROVIDER_ID=$(grep ^$PROVIDER_ID_PATTERN $RAS_CONF_FILE_PATH | awk -F "=" '{print $2}')
XMPP_PASSWORD=$(grep ^$XMPP_PASSWORD_PATTERN $RAS_CONF_FILE_PATH | awk -F "=" '{print $2}')
XMPP_SERVER_IP=$(grep ^$XMPP_SERVER_IP_PATTERN $RAS_CONF_FILE_PATH | awk -F "=" '{print $2}')
AS_URL=$(grep ^$AS_URL_PATTERN $RAS_CONF_FILE_PATH | awk -F "=" '{print $2}')
RAS_URL=$AS_URL
AS_PORT=$(grep ^$AS_PORT_PATTERN $SHARED_INFO_FILE_PATH | awk -F "=" '{print $2}')
RAS_PORT=$(grep ^$RAS_PORT_PATTERN $SHARED_INFO_FILE_PATH | awk -F "=" '{print $2}')

sed -i "s|^$PROVIDER_ID_PATTERN=.*|$PROVIDER_ID_PATTERN=$PROVIDER_ID|g" $FNS_CONF_FILE_PATH
sed -i "s|^$XMPP_JID_PATTERN=.*|$XMPP_JID_PATTERN=fns-$PROVIDER_ID|g" $FNS_CONF_FILE_PATH
sed -i "s|^$XMPP_PASSWORD_PATTERN=.*|$XMPP_PASSWORD_PATTERN=$XMPP_PASSWORD|g" $FNS_CONF_FILE_PATH
sed -i "s|^$XMPP_SERVER_IP_PATTERN=.*|$XMPP_SERVER_IP_PATTERN=$XMPP_SERVER_IP|g" $FNS_CONF_FILE_PATH
sed -i "s|^$AS_URL_PATTERN=.*|$AS_URL_PATTERN=$AS_URL|g" $FNS_CONF_FILE_PATH
sed -i "s|^$AS_PORT_PATTERN=.*|$AS_PORT_PATTERN=$AS_PORT|g" $FNS_CONF_FILE_PATH
sed -i "s|^$RAS_URL_PATTERN=.*|$RAS_URL_PATTERN=$RAS_URL|g" $FNS_CONF_FILE_PATH
sed -i "s|^$RAS_PORT_PATTERN=.*|$RAS_PORT_PATTERN=$RAS_PORT|g" $FNS_CONF_FILE_PATH

#  Launch FNS container

IMAGE_BASE_NAME=$(basename $IMAGE_NAME)
TAG=$(grep $IMAGE_BASE_NAME $CONF_FILES_DIR_PATH/$SERVICES_CONF_FILE_NAME | awk -F "=" '{print $2}')

if [ -z ${TAG// } ]; then
	TAG="latest"
fi

sudo docker stop $CONTAINER_NAME
sudo docker rm $CONTAINER_NAME
sudo docker pull $IMAGE_NAME:$TAG

# Resolving timestamp db
if [ ! -d $PARENT_DIR_PATH/$TIMESTAMP_DB_DIR_NAME ]; then
	mkdir -p $PARENT_DIR_PATH/$TIMESTAMP_DB_DIR_NAME
fi
if [ ! -f $PARENT_DIR_PATH/$TIMESTAMP_DB_DIR_NAME/$FNS_TIMESTAMP_DB_FILE_NAME ]; then
	touch $PARENT_DIR_PATH/$TIMESTAMP_DB_DIR_NAME/$FNS_TIMESTAMP_DB_FILE_NAME
fi
DB_KEY_PATTERN="jdbc_database_url"
CONTAINER_DB_FILE_PATH=$(grep $DB_KEY_PATTERN $CONF_FILES_DIR_PATH/$FNS_CONF_FILE_NAME | awk -F ":" '{print $3}')
FNS_PORT=$(grep ^fns_port $SHARED_INFO_FILE_PATH | awk -F "=" '{print $2}')

sudo docker run -idt \
	--name $CONTAINER_NAME \
	-p $FNS_PORT:8080 \
	-v $CONF_FILES_DIR_PATH:$CONTAINER_CONF_FILES_DIR_PATH \
	-v $CURRENT_DIR_PATH/$APPLICATION_CONF_FILE_NAME:$CONTAINER_RESOURCES_PATH/$APPLICATION_CONF_FILE_NAME \
	-v $CURRENT_DIR_PATH/$LOG4F_FILE_NAME:$CONTAINER_BASE_PATH/$LOG4F_FILE_NAME \
	-v $PARENT_DIR_PATH/$TIMESTAMP_DB_DIR_NAME/$FNS_TIMESTAMP_DB_FILE_NAME:$CONTAINER_DB_FILE_PATH\
	$IMAGE_NAME:$TAG

# Add build value into fns.conf
BUILD_FILE_NAME="build"
sudo docker exec $CONTAINER_NAME /bin/bash -c "cat $BUILD_FILE_NAME >> $CONTAINER_CONF_FILES_DIR_PATH/$FNS_CONF_FILE_NAME"

# Run FNS
sudo docker exec $CONTAINER_NAME /bin/bash -c "./mvnw spring-boot:run -X > log.out 2> log.err" &
